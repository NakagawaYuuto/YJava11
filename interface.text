インターフェースとは・・・

Javaでは「特定のに抽象度が高い抽象クラス」をインターフェースとして特別に扱える。
条件　①：全てのメソッドは抽象メソッドである。
     ②：基本的にフィールドを１つも持たない。
インターフェースに宣言されたメソッドは自動的にpublicかつabstractになるルール。

インターフェースは基本的にフィールドを持たない。
持つのはpublic static final だけの宣言が許される。そして、その場合は省略しても良いことなっているので
フィールド宣言すると自動的にpublic static finalが補われる。

例：クリーニングサービスの場合
    クリーニングサービスはシャツ・タオル・コートを渡せば洗って返してくれるが、布団やマフラーは対応していない。
    public interface CleeningService{
        Shirt washShirt (Shirt s);
        Towl washTowl (Towl t);
        Coat washCoat (Coat c);
        *布団やマフラーのメソッドは無い！
        　そして全て抽象メソッドなので処理内容が無い。（どのようにして洗うのかが分からない。）

     このクリーニングサービスは店頭のメニューのようだ！！
     つまりinterfaceはメニューと店とお客さんの接点の役割を果たしている。

つまり店のメニューのため「クリーニング店」その者が無い。
そのためインターフェースを継承してクリーニング店そのものを作成しなければならない。
継承するときは implements を使う。
なぜimplementsを使われるのかは、親インターフェースで未定だった各メソッドの内容をオーバーライドして実装して確定させる為。

インターフェースの効果
同じインターフェースをimplementsする複数の子クラスたちに、共通のメソッド群を実装するように矯正できる。
インターフェースを実装していれば、少なくともそのインターフェースが定めたメソッドは持っていることが保証される。